// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "ecom/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// GoodRepo is an autogenerated mock type for the GoodRepo type
type GoodRepo struct {
	mock.Mock
}

// AddGood provides a mock function with given fields: ctx, good
func (_m *GoodRepo) AddGood(ctx context.Context, good domain.Good) (string, error) {
	ret := _m.Called(ctx, good)

	if len(ret) == 0 {
		panic("no return value specified for AddGood")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Good) (string, error)); ok {
		return rf(ctx, good)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Good) string); ok {
		r0 = rf(ctx, good)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Good) error); ok {
		r1 = rf(ctx, good)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGood provides a mock function with given fields: ctx, id
func (_m *GoodRepo) DeleteGood(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGood")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllGoods provides a mock function with given fields: ctx, filters, ordersStr
func (_m *GoodRepo) GetAllGoods(ctx context.Context, filters []domain.GormFilter, ordersStr string) ([]domain.Good, error) {
	ret := _m.Called(ctx, filters, ordersStr)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGoods")
	}

	var r0 []domain.Good
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.GormFilter, string) ([]domain.Good, error)); ok {
		return rf(ctx, filters, ordersStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []domain.GormFilter, string) []domain.Good); ok {
		r0 = rf(ctx, filters, ordersStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Good)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []domain.GormFilter, string) error); ok {
		r1 = rf(ctx, filters, ordersStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGoodByID provides a mock function with given fields: ctx, id
func (_m *GoodRepo) GetGoodByID(ctx context.Context, id string) (domain.Good, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGoodByID")
	}

	var r0 domain.Good
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Good, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Good); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Good)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGood provides a mock function with given fields: ctx, good
func (_m *GoodRepo) UpdateGood(ctx context.Context, good domain.Good) error {
	ret := _m.Called(ctx, good)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGood")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Good) error); ok {
		r0 = rf(ctx, good)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGoodRepo creates a new instance of GoodRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoodRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoodRepo {
	mock := &GoodRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
